//height path travalsal code
#include<stdio.h>
#include<stdlib.h>

struct node{
    int data;
    struct node* left;
    struct node* right;
};
struct node* createnode(int data){
    struct node* n;
    n=(struct node*)malloc(sizeof(struct node));
    n->data=data;
    n->left=NULL;
    n->right=NULL;
    return n;
}

int max(int a,int b)
{
	return (a>b)?a:b;
}

struct node* insert(struct node* root,int data)
{
    if(root==NULL){
        root=createnode(data);
    }
    else if(data<=root->data){
        root->left=insert(root->left,data);
    }
    else{
        root->right=insert(root->right,data);
    }
    return root;
}

void preOrder(struct node* root){
    if(root!=NULL){
        printf("%d  ",root->data);
        preOrder(root->left);
        preOrder(root->right);
    }
}

void postOrder(struct node* root){
    if(root!=NULL){
        postOrder(root->left);
        postOrder(root->right);
        printf("%d ",root->data);
    }
}

void inOrder(struct node* root){
    if(root!=NULL){
        inOrder(root->left);
        printf("%d ",root->data);
        inOrder(root->right);
    }
}

int height(struct node* node) {
    if (node == NULL) {
        return 0;
    } else {
        int leftHeight = height( node->left);
        int rightHeight = height(node->right);
        if (leftHeight > rightHeight) {
            return (leftHeight + 1);
        } else {
            return (rightHeight + 1);
        }
    }
}

int maxPathLength(struct node *node)
{
	if(node==NULL)
	{
		return 0;
	}
	else
	{
       int leftHeight=height(node->left);
       int rightHeight=height(node->right);
       int maxLeftPathLength=maxPathLength(node->left);
       int maxRightPathLength=maxPathLength(node->right);
       
       return max((leftHeight + rightHeight),max(maxLeftPathLength,maxRightPathLength));
   }
}


int main(){
    struct node* root=NULL;
    int data,i,n;
    printf("Enter the number of elements to insert:");
    scanf("%d",&n);
    for(i=0;i<n;i++)
    {
        printf("Enter element %d : ",i+1);
        scanf("%d",&data);
        root=insert(root,data);
    }

    printf("Preorder: ");
    preOrder(root);
    printf("\n");
    printf("postorder: ");
    postOrder(root);
    printf("\n");
    printf("Inorder: ");
    inOrder(root);
    printf("\n");
    
    int treeheight=(height(root)-1);
    int Max_Path_Length=maxPathLength(root);
    printf("The height of binary search tree is %d \n", treeheight);
    printf("The Maximum Path Length of the binary search tree is %d \n",Max_Path_Length);
    return 0;
}
